/*
 * DomainDetailsPanel.java
 *
 * Created on 29 November 2007, 10:49
 */
package org.jini.projects.neon.ui;

import java.awt.BorderLayout;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import org.jini.projects.neon.service.admin.AgentAdmin;
import org.jini.projects.neon.service.admin.DomainDescription;

/**
 * 
 * @author UIS524
 */
public class DomainDetailsPanel extends javax.swing.JPanel {

	private AgentAdmin admin;
	DefaultListModel domainModel = new DefaultListModel();
	DefaultListModel domainInModel = new DefaultListModel();
	DefaultListModel domainOutModel = new DefaultListModel();
	DefaultListModel allowableClassesModel = new DefaultListModel();
	DefaultListModel allowableNamesModel = new DefaultListModel();
	Map<String,DomainDescription> domains = new HashMap<String, DomainDescription>();

	public DomainDetailsPanel(AgentAdmin adminOb) throws RemoteException {
		this(adminOb.getDomains());
		this.admin = adminOb;
	}

	/** Creates new form DomainDetailsPanel */
	public DomainDetailsPanel(DomainDescription[] domains) {

		for (int i = 0; i < domains.length; i++) {
			this.domains.put(domains[i].getName(), domains[i]);
			domainModel.addElement(domains[i].getName());
		}
		initComponents();
		jButton1.addActionListener(new java.awt.event.ActionListener() {

			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addDomainActionPerformed(evt);
			}
		});
		jButton2.addActionListener(new java.awt.event.ActionListener() {

			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeDomainActionPerformed(evt);
			}
		});
		domainList.setSelectedIndex(0);
	}

	private void enableAllowableCallersForm(boolean enableAllowableAgents) {

		allowableAgentsList.setEnabled(enableAllowableAgents);
		allowableClassesList.setEnabled(enableAllowableAgents);
		addAllowableAgent.setEnabled(enableAllowableAgents);
		addAllowableClass.setEnabled(enableAllowableAgents);
		removeAllowableAgent.setEnabled(enableAllowableAgents);
		removeAllowableClass.setEnabled(enableAllowableAgents);
	}

	private void enableEncryptionForm(boolean enableEncryptionForm) {

		encryptDomain.setEnabled(enableEncryptionForm);
		encryptMandatory.setEnabled(enableEncryptionForm);
		encryptOther.setEnabled(enableEncryptionForm);
		encryptStorage.setEnabled(enableEncryptionForm);
	}

	private void enableInterDomainForm(boolean enableInterDomain) {

		callInList.setEnabled(enableInterDomain);
		callOutList.setEnabled(enableInterDomain);
		addInDomain.setEnabled(enableInterDomain);
		addOutDomain.setEnabled(enableInterDomain);
		removeInDomain.setEnabled(enableInterDomain);
		removeOutDomain.setEnabled(enableInterDomain);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		domainList = new javax.swing.JList();
		jToolBar1 = new javax.swing.JToolBar();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		saveButton = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();
		securityLevel = new javax.swing.JSlider();
		secLabel = new javax.swing.JLabel();
		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanel1 = new javax.swing.JPanel();
		callInLabel = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		callInList = new javax.swing.JList();
		callOutLabel = new javax.swing.JLabel();
		addInDomain = new javax.swing.JButton();
		jScrollPane3 = new javax.swing.JScrollPane();
		callOutList = new javax.swing.JList();
		removeInDomain = new javax.swing.JButton();
		addOutDomain = new javax.swing.JButton();
		removeOutDomain = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jScrollPane4 = new javax.swing.JScrollPane();
		allowableClassesList = new javax.swing.JList();
		jScrollPane5 = new javax.swing.JScrollPane();
		allowableAgentsList = new javax.swing.JList();
		addAllowableClass = new javax.swing.JButton();
		removeAllowableClass = new javax.swing.JButton();
		addAllowableAgent = new javax.swing.JButton();
		removeAllowableAgent = new javax.swing.JButton();
		jPanel4 = new javax.swing.JPanel();
		jLabel5 = new javax.swing.JLabel();
		encryptionChoice = new javax.swing.JComboBox();
		jLabel6 = new javax.swing.JLabel();
		encryptDomain = new javax.swing.JCheckBox();
		encryptStorage = new javax.swing.JCheckBox();
		encryptOther = new javax.swing.JCheckBox();
		encryptMandatory = new javax.swing.JCheckBox();

		domainList.setModel(domainModel);
		domainList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
				domainListValueChanged(evt);
			}
		});
		jScrollPane1.setViewportView(domainList);

		jToolBar1.setRollover(true);

		jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/building_add.png"))); // NOI18N
		jButton1.setText("Add Domain");
		jButton1.setFocusable(false);
		jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
		jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		jToolBar1.add(jButton1);

		jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/building_delete.png"))); // NOI18N
		jButton2.setText("Delete Domain");
		jButton2.setFocusable(false);
		jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
		jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		jToolBar1.add(jButton2);

		saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/building_edit.png"))); // NOI18N
		saveButton.setText("Save Changes");
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(saveButton);

		jLabel1.setText("Current Domains");

		jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Domain Details"));

		jLabel3.setText("Security Level");

		securityLevel.setMajorTickSpacing(1);
		securityLevel.setMaximum(6);
		securityLevel.setOrientation(javax.swing.JSlider.VERTICAL);
		securityLevel.setPaintLabels(true);
		securityLevel.setPaintTicks(true);
		securityLevel.setSnapToTicks(true);
		securityLevel.setValue(0);
		securityLevel.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				securityLevelStateChanged(evt);
			}
		});

		jPanel1.setLayout(null);

		callInLabel.setFont(callInLabel.getFont().deriveFont(callInLabel.getFont().getSize() - 2f));
		callInLabel.setText("Allow these domains to call agents in:");
		jPanel1.add(callInLabel);
		callInLabel.setBounds(10, 10, 300, 11);

		callInList.setModel(domainInModel);
		jScrollPane2.setViewportView(callInList);

		jPanel1.add(jScrollPane2);
		jScrollPane2.setBounds(10, 30, 274, 152);

		callOutLabel.setFont(callOutLabel.getFont().deriveFont(callOutLabel.getFont().getSize() - 2f));
		callOutLabel.setText("Allow to call agents in these domains");
		jPanel1.add(callOutLabel);
		callOutLabel.setBounds(10, 170, 290, 30);

		addInDomain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/link_add.png"))); // NOI18N
		addInDomain.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addInDomainActionPerformed(evt);
			}
		});
		jPanel1.add(addInDomain);
		addInDomain.setBounds(290, 40, 49, 25);

		callOutList.setModel(domainOutModel);
		jScrollPane3.setViewportView(callOutList);

		jPanel1.add(jScrollPane3);
		jScrollPane3.setBounds(10, 200, 274, 150);

		removeInDomain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/link_delete.png"))); // NOI18N
		removeInDomain.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeInDomainActionPerformed(evt);
			}
		});
		jPanel1.add(removeInDomain);
		removeInDomain.setBounds(290, 80, 49, 25);

		addOutDomain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/link_add.png"))); // NOI18N
		addOutDomain.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addOutDomainActionPerformed(evt);
			}
		});
		jPanel1.add(addOutDomain);
		addOutDomain.setBounds(290, 210, 49, 25);

		removeOutDomain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/link_delete.png"))); // NOI18N
		removeOutDomain.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeOutDomainActionPerformed(evt);
			}
		});
		jPanel1.add(removeOutDomain);
		removeOutDomain.setBounds(290, 240, 49, 25);

		jTabbedPane1.addTab("Inter-Domain Calls", jPanel1);

		jLabel2.setText("<html><body>Classes or packages shown below<br>can call agents in this domain</body></html>");

		jLabel4.setText("<html><body>Agents with the following names<br>can call agents in this domain</body></html>");

		allowableClassesList.setModel(allowableClassesModel);
		jScrollPane4.setViewportView(allowableClassesList);

		allowableAgentsList.setModel(allowableNamesModel);
		jScrollPane5.setViewportView(allowableAgentsList);

		addAllowableClass.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/link_add.png"))); // NOI18N
		addAllowableClass.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addAllowableClassActionPerformed(evt);
			}
		});

		removeAllowableClass.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/link_delete.png"))); // NOI18N
		removeAllowableClass.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeAllowableClassActionPerformed(evt);
			}
		});

		addAllowableAgent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/brick_add.png"))); // NOI18N
		addAllowableAgent.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addAllowableAgentActionPerformed(evt);
			}
		});

		removeAllowableAgent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jini/projects/neon/ui/images/brick_delete.png"))); // NOI18N
		removeAllowableAgent.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeAllowableAgentActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				jPanel3Layout.createSequentialGroup().addContainerGap().add(
						jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel3Layout.createSequentialGroup().add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE).addContainerGap()).add(
								jPanel3Layout.createSequentialGroup().add(218, 218, 218).add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(addAllowableClass).add(addAllowableAgent)).addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED).add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(removeAllowableClass).add(removeAllowableAgent)).addContainerGap(24, Short.MAX_VALUE))
								.add(jPanel3Layout.createSequentialGroup().add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE).add(89, 89, 89)).add(
										jPanel3Layout.createSequentialGroup().add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 223, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(123, Short.MAX_VALUE)).add(
										jPanel3Layout.createSequentialGroup().add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE).add(21, 21, 21)))));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				jPanel3Layout.createSequentialGroup().add(jLabel2).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(addAllowableClass).add(removeAllowableClass)).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel4).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(
								jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(addAllowableAgent).add(removeAllowableAgent)).addContainerGap(47, Short.MAX_VALUE)));

		jTabbedPane1.addTab("Callers", jPanel3);

		jLabel5.setText("Encryption Level");

		encryptionChoice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Domain Info only", "Domain and Agent State", "All If Possible", "Mandatory", "Custom" }));
		encryptionChoice.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				encryptionChoiceActionPerformed(evt);
			}
		});

		jLabel6.setFont(jLabel6.getFont().deriveFont(jLabel6.getFont().getSize() - 2f));
		jLabel6
				.setText("<html><b>Encryption</b><br>\nDomains that support encryption can encrypt their stored data, when it is put onto a datastore<br>\nBy default Neon supports encryptable entries for Javaspaces. Other agents can support encrypted storage\n");

		encryptDomain.setText("Encrypt domain information");
		encryptDomain.setEnabled(false);
		encryptDomain.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				encryptDomainActionPerformed(evt);
			}
		});

		encryptStorage.setText("Encrypt agent storage (savepoints, shutdowns)");
		encryptStorage.setEnabled(false);
		encryptStorage.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				encryptStorageActionPerformed(evt);
			}
		});

		encryptOther.setText("Encrypt other Entries where possible");
		encryptOther.setEnabled(false);
		encryptOther.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				encryptOtherActionPerformed(evt);
			}
		});

		encryptMandatory.setText("Fail if not encryptable");
		encryptMandatory.setEnabled(false);
		encryptMandatory.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				encryptMandatoryActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				jPanel4Layout.createSequentialGroup().addContainerGap().add(
						jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jLabel5).add(encryptMandatory).add(encryptOther).add(encryptionChoice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 249,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(encryptStorage).add(encryptDomain).add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)).addContainerGap()));
		jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				jPanel4Layout.createSequentialGroup().add(jLabel5).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(encryptionChoice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(26, 26, 26).add(encryptDomain).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(encryptStorage).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(
						encryptOther).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(encryptMandatory).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 106, Short.MAX_VALUE).add(jLabel6,
						org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap()));

		jTabbedPane1.addTab("Encryption", jPanel4);

		org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				jPanel2Layout.createSequentialGroup().add(
						jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
								jPanel2Layout.createSequentialGroup().addContainerGap().add(
										jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(secLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(jLabel3))).add(
								jPanel2Layout.createSequentialGroup().add(41, 41, 41).add(securityLevel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
						.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 361, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap()));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				jPanel2Layout.createSequentialGroup().addContainerGap().add(
						jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false).add(org.jdesktop.layout.GroupLayout.LEADING, jTabbedPane1).add(
								org.jdesktop.layout.GroupLayout.LEADING,
								jPanel2Layout.createSequentialGroup().add(jLabel3).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(securityLevel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(secLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))).add(29, 29, 29)));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().add(
						layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
								layout.createSequentialGroup().add(
										layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(22, 22, 22).add(jLabel1)).add(
												layout.createSequentialGroup().addContainerGap().add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 171, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))).addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED).add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(jToolBar1,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 745, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap(44, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(18, 18, 18).add(
						layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
								layout.createSequentialGroup().add(jLabel1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 222, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
								.add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 458, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap(28, Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void encryptStorageActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_encryptStorageActionPerformed
		// TODO add your handling code here:
		DomainDescription domain = (DomainDescription) domains.get(domainList.getSelectedValue());

		domain.setEncryptAgentStorage(encryptStorage.isSelected());
	}// GEN-LAST:event_encryptStorageActionPerformed

	private void domainListValueChanged(javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_domainListValueChanged
		if (domainList.getSelectedValue() != null)
			updateModels();// GEN-LAST:event_domainListValueChanged
	}

	private void addDomainActionPerformed(java.awt.event.ActionEvent evt) {
		String domainName = JOptionPane.showInputDialog("Please provide a name for your new Domain");
		if (domainName != null) {
			DomainDescription newDomain = new DomainDescription(domainName, null, null, new ArrayList(), new ArrayList(), new ArrayList(), new ArrayList(), 0, false, false, false, false);
			domains.put(domainName, newDomain);

			updateDomainModel();
		}

	}

	private void removeDomainActionPerformed(java.awt.event.ActionEvent evt) {
		String domainName = (String) domainList.getSelectedValue();
		if (domainName == null) {
			JOptionPane.showMessageDialog(null, "Please select a domain in the Domain list to remove");
		} else {
			if (JOptionPane.showConfirmDialog(null, "Are you sure you wish to remove the " + domainName + " domain and all agents in it?", "Remove Domain", JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION)
				try {
					domains.remove(domainName);
					admin.removeDomain(domainName);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			updateDomainModel();
		}

	}

	private void addOutDomainActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addOutDomainActionPerformed
		// TODO add your handling code here:
		ArrayList domainNameList = new ArrayList();// GEN-LAST:event_addOutDomainActionPerformed
		for (Object desc : domains.values()) {
			domainNameList.add(((DomainDescription) desc).getName());
		}
		Object input = JOptionPane.showInputDialog(null, "Please select the domain to add", "Allow " + domainList.getSelectedValue() + " to call...", JOptionPane.QUESTION_MESSAGE, null, domainNameList.toArray(), null);
		String domainToAdd = (String) input;
		if (domainToAdd != null) {
			DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
			desc.getDomainsOut().add(input);

		}

		updateModels();
	}

	private void addInDomainActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addInDomainActionPerformed
		// TODO add your handling code here:
		ArrayList domainNameList = new ArrayList();
		for (Object desc : domains.values()) {
			domainNameList.add(((DomainDescription) desc).getName());
		}
		Object input = JOptionPane.showInputDialog(null, "Please select the domain to add", "Add Domain to call " + domainList.getSelectedValue(), JOptionPane.QUESTION_MESSAGE, null, domainNameList.toArray(), null);
		String domainToAdd = (String) input;
		if (domainToAdd != null) {
			DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
			desc.getDomainsIn().add(input);

		}
		updateModels();
	}// GEN-LAST:event_addInDomainActionPerformed

	private void securityLevelStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_securityLevelStateChanged
		// TODO add your handling code here:
		boolean enableInterDomain = false;
		boolean enableAllowableAgents = false;
		boolean enableEncryptionForm = false;
		if (securityLevel.getValue() == 0) {
			secLabel.setText("<html><body><b>Open Security Level</b><br>Calls can be routed from or to this " + "domain from any other.<br>" + "No Checks on calling classes and no encrypted storage</body></html>");

			encryptionChoice.setSelectedIndex(0);
			encryptionChoice.setEnabled(false);

		}
		if (securityLevel.getValue() == 1) {
			secLabel.setText("<html><body><b>No-Global Calls In</b><br>Calls can be routed from or to this " + "domain from any other except calls in from the Global domain.<br>" +

			"No Checks on calling classes and no encrypted storage</body></html>");
			if (domainInModel.contains("Global"))
				domainInModel.removeElement("Global");
			encryptionChoice.setSelectedIndex(0);
			encryptionChoice.setEnabled(false);
		}
		if (securityLevel.getValue() == 2) {
			secLabel.setText("<html><body><b>Restrict Callers</b><br>Calls can be routed from or to this " + "domain from those specified, but will only accept from classes that are specified.<br>" + "No encrypted storage</body></html>");
			enableInterDomain = true;
			enableAllowableAgents = true;
			encryptionChoice.setSelectedIndex(0);
			encryptionChoice.setEnabled(false);

		}

		if (securityLevel.getValue() == 3) {
			secLabel.setText("<html><body><b>Encrypt Domain details</b><br>Calls can be routed from or to this " + "domain from those specified. Checks on callers if required<br>" + "Stores domain details in an encrypted format</body></html>");
			enableInterDomain = true;
			enableAllowableAgents = true;
			enableEncryptionForm = true;
			encryptionChoice.setSelectedIndex(1);
			encryptionChoice.setEnabled(true);
		}
		if (securityLevel.getValue() == 4) {
			secLabel.setText("<html><body><b>Encrypt storage</b><br>Calls can be routed from or to this " + "domain from those specified. Checks on callers if required<br>"
					+ "Domain details and Agent storage is encrypted (savepoints, etc).</body></html>");
			enableInterDomain = true;
			enableAllowableAgents = true;
			enableEncryptionForm = true;
			encryptionChoice.setSelectedIndex(2);
			encryptionChoice.setEnabled(true);
		}

		if (securityLevel.getValue() == 5) {
			secLabel.setText("<html><body><b>Mandatory storage encryption</b><br>Calls can be routed from or to this " + "domain from those specified. Checks on callers if required<br>" + "All entries stored to space must be encryptable</body></html>");
			enableInterDomain = true;
			enableAllowableAgents = true;
			enableEncryptionForm = true;
			encryptionChoice.setSelectedIndex(4);
			encryptionChoice.setEnabled(true);
		}

		if (securityLevel.getValue() == 6) {
			secLabel.setText("<html><body><b>Custom Security</b><br>Calls can be routed from or to this " + "domain from those specified. Checks on callers if required<br>" + "Encryption is customisable</body></html>");
			enableInterDomain = true;
			enableAllowableAgents = true;
			enableEncryptionForm = true;
			encryptionChoice.setEnabled(true);
			encryptionChoice.setSelectedIndex(5);
		}

		enableInterDomainForm(enableInterDomain);
		enableAllowableCallersForm(enableAllowableAgents);
		enableEncryptionForm(enableEncryptionForm);
		DomainDescription domain = (DomainDescription) domains.get(domainList.getSelectedValue());

		domain.setSecurityLevel(securityLevel.getValue());
		setEncryptionOptions();

	}// GEN-LAST:event_securityLevelStateChanged

	private void removeAllowableAgentActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeAllowableAgentActionPerformed

		String agentReference = (String) allowableAgentsList.getSelectedValue();
		if (agentReference == null) {
			JOptionPane.showMessageDialog(null, "Please select an agent reference to remove");
		} else {
			if (JOptionPane.showConfirmDialog(null, "Are you sure you wish to remove the " + agentReference + " reference from the allowable callers list?", "Remove Agent Reference", JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION) {
				DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
				desc.getAllowedNamespaces().remove(agentReference);

				updateModels();
				updateDomainModel();
			}
		}
	}// GEN-LAST:event_removeAllowableAgentActionPerformed

	private void addAllowableAgentActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addAllowableAgentActionPerformed

		String input = JOptionPane.showInputDialog(this, "<html><body>Enter a full name of an agent or namespace<br><font size='-1'>Allowable values are <ul>" + "<li>Fully Qualified Name of agent</li>" + "<li>Agent namespace followed by '.*'</li>"
				+ "</ul>" + "Regular expressions are also supported</body</html>", "Add Agent Reference", JOptionPane.QUESTION_MESSAGE);

		if (input != null) {

			DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
			desc.getAllowedNamespaces().add(input);

			updateModels();
		}

	}// GEN-LAST:event_addAllowableAgentActionPerformed

	private void addAllowableClassActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addAllowableClassActionPerformed

		String input = JOptionPane.showInputDialog(this, "<html><body>Enter a name of a class or package<br><font size='-1'>Allowable values are <ul>" + "<li>Fully Qualified Name of class</li>" + "<li>Package Name followed by '.*'</li>" + "</ul>"
				+ "Regular expressions are also supported</body</html>", "Add Class Reference", JOptionPane.QUESTION_MESSAGE);

		if (input != null) {
			DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
			desc.getAllowedClasses().add(input);

			updateModels();
		}

	}// GEN-LAST:event_addAllowableClassActionPerformed

	private void removeAllowableClassActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeAllowableClassActionPerformed
		String agentReference = (String) allowableClassesList.getSelectedValue();
		if (agentReference == null) {
			JOptionPane.showMessageDialog(null, "Please select a class reference to remove");
		} else {
			if (JOptionPane.showConfirmDialog(null, "Are you sure you wish to remove the " + agentReference + " reference from the allowable callers list?", "Remove Class Reference", JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION) {
				DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
				desc.getAllowedClasses().remove(agentReference);

				updateModels();
			}
		}
	}// GEN-LAST:event_removeAllowableClassActionPerformed

	private void encryptDomainActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_encryptDomainActionPerformed
		// TODO add your handling code here:
		DomainDescription domain = (DomainDescription) domains.get(domainList.getSelectedValue());

		domain.setEncryptDomainInfo(encryptDomain.isSelected());
	}// GEN-LAST:event_encryptDomainActionPerformed

	private void encryptOtherActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_encryptOtherActionPerformed
		DomainDescription domain = (DomainDescription) domains.get(domainList.getSelectedValue());

		domain.setEncryptOtherData(encryptOther.isSelected());
	}// GEN-LAST:event_encryptOtherActionPerformed

	private void encryptMandatoryActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_encryptMandatoryActionPerformed
		DomainDescription domain = (DomainDescription) domains.get(domainList.getSelectedValue());

		domain.setFailIfEncryptionAvailable(encryptMandatory.isSelected());
	}// GEN-LAST:event_encryptMandatoryActionPerformed

	private void encryptionChoiceActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_encryptionChoiceActionPerformed
		setEncryptionOptions();

	}// GEN-LAST:event_encryptionChoiceActionPerformed

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed

		try {
			for (DomainDescription dom : domains.values())
				admin.updateDomainDescription(dom);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// TODO add your handling code here:
	}// GEN-LAST:event_saveButtonActionPerformed

	private void removeInDomainActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeInDomainActionPerformed
		// TODO add your handling code here:
		String inReference = (String) callInList.getSelectedValue();
		if (inReference == null) {
			JOptionPane.showMessageDialog(null, "Please select a domain reference to remove");
		} else {
			if (JOptionPane.showConfirmDialog(null, "Are you sure you wish to remove the " + inReference + " reference from the Domain In list?", "Remove Domain In", JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION) {
				DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
				desc.getDomainsIn().remove(inReference);

			}
			updateModels();
		}
	}// GEN-LAST:event_removeInDomainActionPerformed

	private void removeOutDomainActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeOutDomainActionPerformed
		String outReference = (String) callOutList.getSelectedValue();
		if (outReference == null) {
			JOptionPane.showMessageDialog(null, "Please select a domain reference to remove");
		} else {
			if (JOptionPane.showConfirmDialog(null, "Are you sure you wish to remove the " + outReference + " reference from the Domain Out list?", "Remove Domain Out", JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION) {
				DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
				desc.getDomainsOut().remove(outReference);

			}
			updateModels();
		}
		// TODO add your handling code here:
	}// GEN-LAST:event_removeOutDomainActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addAllowableAgent;
	private javax.swing.JButton addAllowableClass;
	private javax.swing.JButton addInDomain;
	private javax.swing.JButton addOutDomain;
	private javax.swing.JList allowableAgentsList;
	private javax.swing.JList allowableClassesList;
	private javax.swing.JLabel callInLabel;
	private javax.swing.JList callInList;
	private javax.swing.JLabel callOutLabel;
	private javax.swing.JList callOutList;
	private javax.swing.JList domainList;
	private javax.swing.JCheckBox encryptDomain;
	private javax.swing.JCheckBox encryptMandatory;
	private javax.swing.JCheckBox encryptOther;
	private javax.swing.JCheckBox encryptStorage;
	private javax.swing.JComboBox encryptionChoice;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JButton removeAllowableAgent;
	private javax.swing.JButton removeAllowableClass;
	private javax.swing.JButton removeInDomain;
	private javax.swing.JButton removeOutDomain;
	private javax.swing.JButton saveButton;
	private javax.swing.JLabel secLabel;
	private javax.swing.JSlider securityLevel;

	// End of variables declaration//GEN-END:variables
	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			JFrame testFrame = new JFrame("Test Domain Panel");
			testFrame.setSize(400, 400);
			testFrame.setLayout(new BorderLayout());
			ArrayList gIn = new ArrayList();
			gIn.add("test");
			ArrayList tIn = new ArrayList();
			tIn.add("global");
			ArrayList tOut = new ArrayList();
			tOut.add("global");
			MockAgentAdmin mockAdmin = new MockAgentAdmin();
			testFrame.getContentPane().add(new DomainDetailsPanel(mockAdmin), BorderLayout.CENTER);
			testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			testFrame.setVisible(true);
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(DomainDetailsPanel.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(DomainDetailsPanel.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(DomainDetailsPanel.class.getName()).log(Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			Logger.getLogger(DomainDetailsPanel.class.getName()).log(Level.SEVERE, null, ex);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void setEncryptionOptions() {
		// TODO add your handling code here:
		int choice = encryptionChoice.getSelectedIndex();
		boolean[] options = new boolean[] { false, false, false, false };
		switch (choice) {
		case 4:
			options[3] = true;
		case 3:
			options[2] = true;
		case 2:
			options[1] = true;
		case 1:
			options[0] = true;
		case 0:
			encryptDomain.setEnabled(false);
			encryptMandatory.setEnabled(false);
			encryptOther.setEnabled(false);
			encryptStorage.setEnabled(false);

			encryptDomain.setSelected(options[0]);
			encryptStorage.setSelected(options[1]);
			encryptOther.setSelected(options[2]);
			encryptMandatory.setSelected(options[3]);

			break;
		case 5:
			encryptDomain.setEnabled(true);
			encryptMandatory.setEnabled(true);
			encryptOther.setEnabled(true);
			encryptStorage.setEnabled(true);
			encryptionChoice.setEnabled(true);
			break;
		}
		if (securityLevel.getValue() == 6) {
			DomainDescription desc = (DomainDescription) domains.get(domainList.getSelectedValue());
			System.out.println(desc.getName());
			encryptDomain.setEnabled(true);
			encryptMandatory.setEnabled(true);
			encryptOther.setEnabled(true);
			encryptStorage.setEnabled(true);
			encryptionChoice.setEnabled(true);

			encryptDomain.setSelected(desc.isEncryptDomainInfo());
			encryptMandatory.setSelected(desc.isFailIfEncryptionAvailable());
			encryptOther.setSelected(desc.isEncryptOtherData());
			encryptStorage.setSelected(desc.isEncryptAgentStorage());

		}

	}

	private void updateDomainModel() {
		String selected = (String) domainList.getSelectedValue();
		domainModel.clear();
			DomainDescription[] svcdomains = domains.values().toArray(new DomainDescription[]{});
			for (int i = 0; i < svcdomains.length; i++) {
				domainModel.addElement(svcdomains[i].getName());
			}
		
		if (domains.containsKey(selected))
			domainList.setSelectedValue(selected, true);
	}

	private void updateModels() {
		// TODO add your handling code here:
		domainInModel.clear();
		domainOutModel.clear();
		allowableClassesModel.clear();
		allowableNamesModel.clear();
		callInLabel.setText("Allow these domains to call agents in " + domainList.getSelectedValue());
		callOutLabel.setText("Allow " + domainList.getSelectedValue() + " to call agents in these domains");
		DomainDescription domain = (DomainDescription) domains.get(domainList.getSelectedValue());
		for (Object o : domain.getDomainsIn()) {
			domainInModel.addElement(o);
		}
		if (domainInModel.size() == 0)
			domainInModel.addElement("");
		for (Object o : domain.getDomainsOut()) {
			domainOutModel.addElement(o);
		}
		if (domainOutModel.size() == 0)
			domainOutModel.addElement("");

		for (Object o : domain.getAllowedClasses()) {
			allowableClassesModel.addElement(o);
		}
		for (Object o : domain.getAllowedNamespaces()) {
			allowableNamesModel.addElement(o);
		}

		securityLevel.setValue(domain.getSecurityLevel());
		// encryptionChoice.setSelectedIndex(domain.getSecurityLevel());
		System.out.println(domain.getSecurityLevel());
		if (domain.getSecurityLevel() > 5) {
			encryptDomain.setEnabled(domain.isEncryptDomainInfo());
			encryptMandatory.setEnabled(domain.isFailIfEncryptionAvailable());
			encryptOther.setEnabled(domain.isEncryptOtherData());
			encryptStorage.setEnabled(domain.isEncryptAgentStorage());
			encryptionChoice.setEnabled(true);
		}
	}

}
